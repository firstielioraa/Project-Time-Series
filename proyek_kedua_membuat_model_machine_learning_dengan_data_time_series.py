# -*- coding: utf-8 -*-
"""Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11IakYrG2KrBW3irTq_VyKq3rK4VWVo2i
"""

from google.colab import drive
drive.mount('/content/drive')

#Import Library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

#Melakukan Proses Ekstrak pada file zip
import zipfile
local_zip = "/content/drive/MyDrive/archive_3.zip"
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall("/content")
zip_ref.close()

#Read CSV and display the data
dataset = pd.read_csv('/content/openweatherdata-denpasar-1990-2020.csv')
display(dataset)

#Check data null
dataset.isnull().sum()

#Drop attribute that not used
dataset = dataset.drop(dataset.columns[[0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                                        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]],axis=1)
display(dataset.head())

#Check data is null
dataset.isnull().sum()
dataset.info()

#Rename Attribute dt_iso into date
dataset = dataset.rename(columns={'dt_iso': 'date'})
display(dataset.head())

#Plot time series
date = dataset['date'].values
temperature  = dataset['temp'].values
plt.figure(figsize=(15,5))
plt.plot(date, temperature)
plt.title('Denpasar Weather',
          fontsize=20);

from sklearn.model_selection import train_test_split
X_train, X_validation, y_train, y_validation = train_test_split(temperature, date, test_size = 0.2, random_state = 42)
print("X Train= ",len(X_train))
print("X Vaidation= ",len(X_validation))
print("Y train= ",len(y_train))
print("Y Validation= ",len(y_validation))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

tf.keras.backend.set_floatx('float64')
train_set = windowed_dataset(X_train, window_size=64, batch_size=1024, shuffle_buffer=1000)
validation_set = windowed_dataset(X_validation, window_size=64, batch_size=1024, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"), 
  tf.keras.layers.Dense(1),
])

#Menghitung nilai mae
Mae = (dataset['temp'].max() - dataset['temp'].min()) * 0.1
print("Temp Max= ",dataset['temp'].max())
print("Temp Min= ",dataset['temp'].min())
print("MAE= ",Mae)

#Callback 10% mae
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<3.6 and logs.get('val_mae')<3.6):
      print("MAE < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,metrics=["mae"])
trainmodel = model.fit(train_set,epochs=100,validation_data=validation_set,verbose=2,callbacks=[callbacks])

#Plot MAE and Loss
import matplotlib.pyplot as plt
# MAE
plt.plot(trainmodel.history['mae'])
plt.plot(trainmodel.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()  
#Loss
plt.plot(trainmodel.history['loss'])
plt.plot(trainmodel.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()